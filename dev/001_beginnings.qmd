# The First Steps

To explore the necessary parts and api we are building up a trivial Sankey with basic building blocks of ggplot2

```{r setup}
library(tidyverse)

df_edges <- bind_rows( tibble_row( x_from=0, node_from='start'   , x_to=1, node_to='middle_1', weight=.75         )
                     , tibble_row( x_from=0, node_from='start'   , x_to=1, node_to='exit_1'  , weight=.25         )
                     , tibble_row( x_from=1, node_from='middle_1', x_to=2, node_to='middle_2', weight=.75*.75     )
                     , tibble_row( x_from=1, node_from='middle_1', x_to=2, node_to='exit_2'  , weight=.25*.75     )
                     , tibble_row( x_from=2, node_from='middle_2', x_to=3, node_to='end'     , weight=.75*.75*.75 )
                     , tibble_row( x_from=2, node_from='middle_2', x_to=3, node_to='exit_3'  , weight=.25*.75*.75 ) )
df_edges
```

## Plot

```{r node_computation}
df_nodes <- df_edges %>% 
	pivot_longer( -weight, names_to=c( '.value', 'side' ), names_pattern='(.*)_(.*)' ) %>% 
	group_by( side, x, node ) %>% 
	summarise( height=sum(weight), .groups='drop' ) %>% 
	pivot_wider( id_cols=c( x, node ), names_from='side', names_glue='height_{side}', values_from='height', values_fill=0 ) %>% 
	mutate( height=pmax( height_from, height_to ) ) %>% 
	select( -height_from, -height_to )

df_nodes
```

with such a df added extra we could add all sorts of extra info easily.

```{r node_y_calc}
inter_node_spacing <- 0.2

df_nodes_pos <- df_nodes %>% 
	arrange( x, height ) %>% 
	group_by(x) %>% 
	mutate( y_top=cumsum(     height             ) + (0:(n()-1))*inter_node_spacing
	      , y_bot=cumsum(lag( height, default=0 )) + (0:(n()-1))*inter_node_spacing ) %>% 
	mutate( y_bot=y_bot - max(y_top)/2
	      , y_top=y_top - max(y_top)/2 ) 
df_nodes_pos

ggplot(df_nodes_pos) + 
	geom_segment(aes( x=x, xend=x, y=y_bot, yend=y_top ))
```

```{r edge_plotting}
lerp <- function( lower, upper, x ){
	lower + (upper-lower)*x
}
df_edges_plot <- df_edges %>% 
	select( -x_from, -x_to ) %>% #In theory we could do something complicated on x in the nodes area
	inner_join( rename_with( df_nodes_pos, ~str_c( .x, '_from' ) ), by='node_from' ) %>% 
	inner_join( rename_with( df_nodes_pos, ~str_c( .x, '_to'   ) ), by='node_to'   ) %>% 
	arrange( x_from, desc(y_top_from), x_to, desc(y_top_to) ) %>% 
	group_by( x_from, node_from ) %>% 
	mutate( edge_prop_start_from=cumsum(lag( weight, default=0 ))/height_from
	      , edge_prop_end_from  =cumsum(     weight             )/height_from ) %>% 
	mutate( y_edge_top_from = lerp( y_top_from, y_bot_from, edge_prop_start_from )
	      , y_edge_bot_from = lerp( y_top_from, y_bot_from, edge_prop_end_from   ) ) %>% 
	ungroup() %>% 
	group_by( x_to, node_to ) %>% 
	mutate( edge_prop_start_to=cumsum(lag( weight, default=0 ))/height_to
	      , edge_prop_end_to  =cumsum(     weight             )/height_to ) %>% 
	mutate( y_edge_top_to = lerp( y_top_to, y_bot_to, edge_prop_start_to )
	      , y_edge_bot_to = lerp( y_top_to, y_bot_to, edge_prop_end_to   ) ) %>% 
	ungroup()

df_edges_plot



df_edges_polygon <- df_edges_plot %>% 
	select( x_from, y_edge_top_from, y_edge_bot_from, x_to, y_edge_top_to, y_edge_bot_to ) %>% 
	mutate( group=1:n() ) %>% 
	pivot_longer( -group, names_to=c( '.value', 'side' ), names_pattern='(.*)_(from|to)' )
df_edges_polygon

ggplot(df_nodes_pos) + 
	geom_segment(aes( x=x, xend=x, y=y_bot, yend=y_top )) +
	geom_ribbon( aes( x=x, ymin=y_edge_bot, ymax=y_edge_top, group=group, alpha=1/3 ), data=df_edges_polygon, show.legend=F )

```

## Takeaway thoughts

-   x Ordering of nodes
    -   If node names given as factors order it by that
    -   Else work out ordering sequentially
    -   Can also do Sugiyama
-   y ordering of nodes
    -   Want bottom mid and top aligned flows
    -   Also should be able to manually specify
-   Need some sort of system for generating x's.
-   Need optional node metadata df for specifying optional parameters.

# Refactor 1: Engeomification

```{r}
# Next step is to perform polygonification earlier so coord works well with it, but still allow recontruction of node in draw_panel
lerp <- function( lower, upper, x ){
	lower + (upper-lower)*x
}

GeomSankey <- ggproto( 'GeomSankey', Geom
					 , required_aes = c( 'x_from', 'node_from', 'x_to', 'node_to', 'weight' )
					 , non_missing_aes = c( 'x', 'ymin', 'ymax', 'group', 'alpha' )
					 , setup_data = function( data, params ){
					 	print('setup_data')
					 	inter_node_spacing <- 0.2
					 	
						data_nodes_proto <- data %>% 
							pivot_longer( c( x_from, node_from, x_to, node_to ), names_to=c( '.value', 'side' ), names_pattern='(.*)_(.*)' ) %>% 
							group_by( side, x, node ) %>% 
							summarise( height=sum(weight), PANEL=first(PANEL), .groups='drop' ) %>% 
							pivot_wider( id_cols=c( x, node, PANEL ), names_from='side', names_glue='height_{side}', values_from='height', values_fill=0 ) %>% 
							mutate( height=pmax( height_from, height_to ) ) %>% 
							select( -height_from, -height_to ) %>% 
							arrange( x, height ) %>% 
							group_by(x) %>% 
							mutate( yend=cumsum(     height             ) + (0:(n()-1))*inter_node_spacing
							      , y   =cumsum(lag( height, default=0 )) + (0:(n()-1))*inter_node_spacing ) %>% 
							mutate( y   =y    - max(yend)/2
							      , yend=yend - max(yend)/2 ) %>% 
							mutate(xend=x) %>% 
							select(-PANEL)
						
						data_edges_plot <- data %>% 
							select( -x_from, -x_to ) %>% #In theory we could do something complicated on x in the nodes area
							inner_join( rename_with( data_nodes_proto, ~str_c( .x, '_from' ) ), by='node_from' ) %>% 
							inner_join( rename_with( data_nodes_proto, ~str_c( .x, '_to'   ) ), by='node_to'   ) %>% 
							arrange( x_from, desc(yend_from), x_to, desc(yend_to) ) %>% 
							group_by( x_from, node_from ) %>% 
							mutate( edge_prop_start_from=cumsum(lag( weight, default=0 ))/height_from
							      , edge_prop_end_from  =cumsum(     weight             )/height_from ) %>% 
							mutate( ymax_from = lerp( yend_from, y_from, edge_prop_start_from )
							      , ymin_from = lerp( yend_from, y_from, edge_prop_end_from   ) ) %>% 
							ungroup() %>% 
							group_by( x_to, node_to ) %>% 
							mutate( edge_prop_start_to=cumsum(lag( weight, default=0 ))/height_to
							      , edge_prop_end_to  =cumsum(     weight             )/height_to ) %>% 
							mutate( ymax_to = lerp( yend_to, y_to, edge_prop_start_to )
							      , ymin_to = lerp( yend_to, y_to, edge_prop_end_to   ) ) %>% 
							ungroup()
						data_edges_plot
					 }
					 , draw_panel = function( self, data, panel_params, coord ){
					 	print('draw_panel')
						print(coord)
						
						data_edges_polygon <- data %>% 
							select( PANEL, x_from, ymax_from, ymin_from, x_to, ymax_to, ymin_to ) %>% 
							mutate( group=1:n() ) %>% 
							pivot_longer( c( x_from, ymax_from, ymin_from, x_to, ymax_to, ymin_to ), names_to=c( '.value', 'side' ), names_pattern='(.*)_(from|to)' ) %>% 
							mutate( alpha=1/3
							      , fill=GeomRibbon$default_aes$fill
							      , colour=GeomRibbon$default_aes$colour
							      , linewidth=GeomRibbon$default_aes$linewidth
							      , linetype=GeomRibbon$default_aes$linetype )
									
					 	
						data_nodes <- data %>% 
							pivot_longer( matches('_to$|_from$'), names_to=c( '.value', 'side' ), names_pattern='(.*)_(.*)' ) %>% 
							group_by( side, x, node ) %>% 
							mutate( linewidth=GeomSegment$default_aes$linewidth
							      , linetype=GeomSegment$default_aes$linetype
							      , colour=GeomSegment$default_aes$colour
							      , alpha=GeomSegment$default_aes$alpha )
						
						node_grob  <- GeomSegment$draw_panel( data_nodes        , panel_params, coord )
						edges_grob <- GeomRibbon$ draw_panel( data_edges_polygon, panel_params, coord )
						
						
						ggplot2:::ggname( 'geom_sankey', grid::grobTree( edges_grob	
						                                               , node_grob ))
					   }
)

geom_sankey <- function( mapping=NULL
					   , data=NULL
					   , stat='identity'
					   , position='identity'
					   , show.legend=NA
					   , inherit.aes=TRUE
					   , ... ){
	layer( geom=GeomSankey
		 , mapping=mapping
		 , data=data
		 , stat=stat
		 , position=position
		 , show.legend=show.legend
		 , inherit.aes=inherit.aes
		 , params=list(...)
		 )
}

ggplot(df_edges) + 
	geom_sankey(aes( x_from=x_from, node_from=node_from, x_to=x_to, node_to=node_to, weight=weight ))
```

```{r}
GeomSimplePoint <- ggproto("GeomSimplePoint", GeomPoint,
  draw_panel = function(data, panel_params, coord) {
  	GeomPoint$draw_panel(data, panel_params, coord)
  }
)

geom_simple_point <- function(mapping = NULL, data = NULL, stat = "identity",
                              position = "identity", na.rm = FALSE, show.legend = NA, 
                              inherit.aes = TRUE, ...) {
  layer(
    geom = GeomSimplePoint, mapping = mapping,  data = data, stat = stat, 
    position = position, show.legend = show.legend, inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}

ggplot(mpg, aes(displ, hwy)) + 
	geom_simple_point()
```

